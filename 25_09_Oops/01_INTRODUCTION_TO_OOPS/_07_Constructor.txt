
CONSTRUCTOR

A constructor is a special method in a class designed to initialize an object when it is created. It ensures that the object is set up with the required attributes and state before it is used.

Consider the following example to understand the syntax and working of Constructors:

        import java.util.*;
        class Employee {
            private int salary; // to store the salary of employee

            public String employeeName; // to store the name of employee

            // Constructor
            public Employee() {
                employeeName = "John Doe";
                salary = 5000;
            }

            // Method to set the employee name as given input
            public void setName(String s) {
                employeeName = s;
            }

            // Method to set the salary as given input
            public void setSalary(int val) {
                salary = val;
            }

            // Method to get the salary of the employee
            public int getSalary() {
                return salary;
            }
        }

        // Main Class
        class Main {
            public static void main(String[] args) {
                // Creating an object of Employee class
                Employee obj = new Employee();

                // Attributes of object initialized by the constructor
                System.out.println("Default values initialized by the constructor:\n");
                System.out.println("Employee Name: " + obj.employeeName);
                System.out.println("Salary: " + obj.getSalary());
            }
        }


Keypoints:

    • Syntax: A constructor is a method that has the exact same name as the class and does not have a return type (not even void).

    • A constructor is called when an object is created. This justifies why the above code snippets gives the shown output.

    • If there is no constructor written for the given class, the language by-default triggers the default constructor.



PURPOSE OF CONSTRUCTOR :

There are three major purposes behind creating a constructor for a class which are as follows:
    
    • Object Initialization: Constructor helps in initializing an object at the time of creation by assigning it default or user-defined values to object attributes.
    
    • Code Reusability: Everytime an object is created, the same code is reused preventing writing mulitple lines of codes to initialize different objects.
    
    • Ensures Default Value: Ensures that the object is always started in a default state with default values when initiated.


TYPES OF CONSTRUCTOR  :

There are three different types of constructos:
    
    • Non-parameterized Constructor
    
    • Parameterized Constructor
    
    • Copy Constructor


1. Non-parameterized Constructor:
   
    When a constructor does not take any arguments as the input, it is called a Non-parameterized Constructor. For example, in the given code snippet there are not arguments taken by the constructor.
        
        import java.util.*;
        class Employee {
            // Non-parameterised constructor
            Employee() {
                System.out.println("Employee created!");
            }
        }

2. Parameterized Constructor:

    It is a type of constructor that accepts arguments to initialize attributes with specific values. For example, the following code snippet shows a parameterized constructor initializing the attributes of the object with the arguments provided by the user.

        import java.util.*;
        class Employee {
            public String employeeName; // To store the name of the employee
            public int salary;          // To store the salary of the employee

            // Parameterized constructor
            public Employee(String name, int salary) {
                this.employeeName = name;
                this.salary = salary;
            }
        }

        // Main Class
        class Main {
            public static void main(String[] args) {
                /* Creating an object of Employee class and passing 
                values for the parameterized constructor */
                Employee obj = new Employee("Raj", 10000);

                // Output
                System.out.println("The salary of employee named " + 
                                    obj.employeeName + " is " + obj.salary);
            }
        }

Keypoints:

    • The keyword "this" in Java is a reference to the current instance of the class. It is used to distinguish between instance variables (attributes) and parameters or local variables with the same name.   
    
    • It is useful in cases when the object must be initialized with user-defined attributes.


3. Copy Constructor:

    It enables the programmer to create a new object by copying the attributes of an existing object. Java doesn't have an explicit copy constructor like C++ does. However, a copy constructor can be implemented manually by creating a constructor that takes an object of the same class as a parameter and copies its attributes using Constructor Chaining. Here's an example:

        import java.util.*;
        class Employee {
            public String employeeName; // To store the name of the employee
            public int salary;          // To store the salary of the employee

            // Parameterized constructor
            public Employee(String name, int salary) {
                this.employeeName = name;
                this.salary = salary;
            }
            
            // Copy Constructor
            public Employee(Employee employee) {
                // Calling another constructor
                this(employee.employeeName, employee.salary);
            }
        }

        // Main Class
        class Main {
            public static void main(String[] args) {
                /* Creating an object of Employee class and passing 
                values for the parameterized constructor */
                Employee obj = new Employee("Raj", 10000);
                
                // Creating a copy of obj using Copy constructor
                Employee objCopy = new Employee(obj);
                
                // Printing the attibutes of copied object
                System.out.println("Name of the copied employee: " + objCopy.employeeName);
                System.out.println("Salary of the copied employee: " + objCopy.salary);
            }
        }



CONSTRUCTOR CHAINING

In Java, a constructor can call another constructor of the same class using the this() keyword. This is known as constructor chaining and is used to reduce code duplication and simplify initialization logic.

Keypoints:

    • The this() call must always be the first statement in the constructor.
  
    • It allows one constructor to reuse the logic of another constructor in the same class.
  
    • The chaining stops when the constructor without a this() call (usually the one with the least number of parameters) is invoked.
  
    • There is no limit on the chain length in constructor chaining.


Use-case:

Constructor chaining is particularly useful in scenarios where a class has multiple constructors with different levels of detail for initializing an object. By chaining constructors, duplicating initialization logic can be avoided while maintaining a single point of truth for setting up the object's state.



CONSTRUCTOR OVERLOADING 

Constructor overloading occurs when a class has more than one constructor, but each constructor has a different parameter list or different parameter type. It allows an object to be initialized in different ways depending on the parameters provided at the time of object creation. Consider the code snippet given below:

        import java.util.*;
        class Employee {
                public String employeeName; // To store the name of the employee
                public int salary;          // To store the salary of the employee
            
                // Default Constructor
                public Employee() {
                    this.employeeName = "Unknown";
                    this.salary = 0;
                }
            
                // Constructor with one parameter
                public Employee(String employeeName) {
                    this.employeeName = employeeName;
                    this.salary = 0; // Default salary
                }
            
                // Constructor with two parameters
                public Employee(String employeeName, int salary) {
                    this.employeeName = employeeName;
                    this.salary = salary;
                }
            
                // Method to display employee details
                public void displayDetails() {
                    System.out.println("Employee Name: " + employeeName);
                    System.out.println("Salary: " + salary);
                }
            }
            
            // Main Class
            class Main {
                public static void main(String[] args) {
                    // Using Default Constructor
                    Employee emp1 = new Employee();
                    System.out.println("Details of Employee 1 (Default Constructor):");
                    emp1.displayDetails();
            
                    System.out.println(); // Line break for clarity
            
                    // Using Constructor with one parameter
                    Employee emp2 = new Employee("Raj");
                    System.out.println("Details of Employee 2 (One Parameter Constructor):");
                    emp2.displayDetails();
            
                    System.out.println(); // Line break for clarity
            
                    // Using Constructor with two parameters
                    Employee emp3 = new Employee("Rahul", 5000);
                    System.out.println("Details of Employee 3 (Two Parameters Constructor):");
                    emp3.displayDetails();
                }
            }


Advantages:
    
    • Flexibility: It provides different ways to create and initialize objects based on available data.
    
    • Code Reusability: Allows user to reuse the same class for different initialization scenarios without duplicating code.
    
    • Improved Readability: Makes the code more readable and cleaner by grouping related logic in one class.








































